// Generated by CoffeeScript 1.4.0
var APP, BIN, CAKE, COFFEE, CROJS, DOC, EXT, GROC, NODE, NPM, OUT, SRC, TEST, WINDOWS, clean, compile, document, exec, finish, install, pathUtil, reset, safe, setup, spawn, test, watch, _ref;

WINDOWS = process.platform.indexOf('win') === 0;

NODE = process.execPath;

NPM = WINDOWS ? process.execPath.replace('node.exe', 'npm.cmd') : 'npm';

EXT = (WINDOWS ? '.cmd' : '');

APP = process.cwd();

BIN = "" + APP + "/node_modules/.bin";

CAKE = "" + BIN + "/cake" + EXT;

COFFEE = "" + BIN + "/coffee" + EXT;

OUT = "" + APP + "/out";

SRC = "" + APP + "/src";

TEST = "" + APP + "/test";

DOC = "" + APP + "/man";

GROC = "" + BIN + "/groc" + EXT;

CROJS = "" + BIN + "/crojsdoc" + EXT;

pathUtil = require('path');

_ref = require('child_process'), exec = _ref.exec, spawn = _ref.spawn;

safe = function(next, fn) {
  return function(err) {
    if (err) {
      return next(err);
    }
    return fn();
  };
};

clean = function(opts, next) {
  var args;
  if (next == null) {
    next = opts;
    opts = {};
  }
  args = ['-Rf', OUT, DOC, pathUtil.join(APP, 'node_modules'), pathUtil.join(APP, '*out'), pathUtil.join(APP, '*log'), pathUtil.join(TEST, 'node_modules'), pathUtil.join(TEST, '*out'), pathUtil.join(TEST, '*log')];
  return spawn('rm', args, {
    stdio: 'inherit',
    cwd: APP
  }).on('exit', next);
};

compile = function(opts, next) {
  if (next == null) {
    next = opts;
    opts = {};
  }
  return spawn(COFFEE, ['-bco', OUT, SRC], {
    stdio: 'inherit',
    cwd: APP
  }).on('exit', next);
};

watch = function(opts, next) {
  if (next == null) {
    next = opts;
    opts = {};
  }
  return spawn(COFFEE, ['-bwco', OUT, SRC], {
    stdio: 'inherit',
    cwd: APP
  }).on('exit', next);
};

install = function(opts, next) {
  if (next == null) {
    next = opts;
    opts = {};
  }
  return spawn(NPM, ['install'], {
    stdio: 'inherit',
    cwd: APP
  }).on('exit', safe(next, function() {
    return spawn(NPM, ['install'], {
      stdio: 'inherit',
      cwd: TEST
    }).on('exit', next);
  }));
};

reset = function(opts, next) {
  if (next == null) {
    next = opts;
    opts = {};
  }
  return clean(opts, safe(next, function() {
    return install(opts, safe(next, function() {
      return compile(opts, next);
    }));
  }));
};

setup = function(opts, next) {
  if (next == null) {
    next = opts;
    opts = {};
  }
  return install(opts, safe(next, function() {
    return compile(opts, next);
  }));
};

test = function(opts, next) {
  var args;
  if (next == null) {
    next = opts;
    opts = {};
  }
  args = [];
  if (opts.debug) {
    args.push("--debug-brk");
  }
  args.push("" + OUT + "/test/everything.test.js");
  args.push("--joe-reporter=list");
  return spawn(NODE, args, {
    stdio: 'inherit',
    cwd: APP
  }, next);
};

finish = function(err) {
  if (err) {
    throw err;
  }
  return console.log('OK');
};

document = function(opts, next) {
  var args;
  if (next == null) {
    next = opts;
    opts = {};
  }
  args = [];
  if (opts.literate) {
    spawn(GROC, args, {
      stdio: 'inherit',
      cwd: APP
    }).on('exit', next);
  }
  if (opts.oop) {
    return spawn(CROJS, "-o " + DOC + "/crojs", {
      stdio: 'inherit',
      cwd: APP
    }).on('exit', next);
  }
};

task('clean', 'clean up instance', function() {
  return clean(finish);
});

task('compile', 'compile our files', function() {
  return compile(finish);
});

task('dev', 'watch and recompile our files', function() {
  return watch(finish);
});

task('watch', 'watch and recompile our files', function() {
  return watch(finish);
});

task('install', 'install dependencies', function() {
  return install(finish);
});

task('reset', 'reset instance', function() {
  return reset(finish);
});

task('setup', 'setup for development', function() {
  return setup(finish);
});

task('test', 'run our tests', function() {
  return test(finish);
});

task('test-debug', 'run our tests in debug mode', function() {
  return test({
    debug: true
  }, finish);
});

task('test-prepare', 'prepare out tests', function() {
  return setup(finish);
});

task('document-literate', '*NEW* literate programming documentation from source code', function() {
  return publish({
    literate: true
  }, finish);
});

task('document-object', '*NEW* object-oriented / API documentation from source code', function() {
  return publish({
    oop: true
  }, finish);
});
